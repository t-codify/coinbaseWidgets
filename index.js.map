{"mappings":"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","sources":["src/index.js","src/components/WebsocketComponent.js","src/utils/constants.js","src/components/TopOfBookComponent.js","src/components/PriceBoxComponent.js","src/utils/ProductContext.js","src/components/OrderBook.js","src/components/RealTimePriceChart.js","src/utils/customHooks/useWebSocket.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport WebSocketComponent from \"./components/WebsocketComponent\";\nimport { createBrowserRouter, Outlet, RouterProvider } from \"react-router-dom\";\nimport ProductContext from \"./utils/ProductContext\";\nimport OrderBook from \"./components/OrderBook\";\nimport useWebSocket from \"./utils/customHooks/useWebSocket\";\nconst AppLayout = () => {\n  const [tickerData, setTickerData] = useState();\n  const [l2UpdateData, setl2UpdateData] = useState();\n  const [snapshotData, setSnapshotData] = useState();\n  return (\n    <div>\n      <ProductContext.Provider\n        value={{\n          ticker: tickerData,\n          setTickerData,\n          l2update: l2UpdateData,\n          setl2UpdateData,\n          snapshot: snapshotData,\n          setSnapshotData,\n        }}\n      >\n        <WebSocketComponent />\n        {/* <OrderBook /> */}\n      </ProductContext.Provider>\n    </div>\n  );\n};\n\nconst appRouter = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <AppLayout />,\n  },\n  {\n    path: \"/coinbaseWidgets/\",\n    element: <AppLayout />,\n  },\n]);\nconst rootEle = ReactDOM.createRoot(document.getElementById(\"root\"));\nrootEle.render(<RouterProvider router={appRouter} />);\n","import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport { selectOptions } from \"../utils/constants\";\nimport TopOfBookComponent from \"./TopOfBookComponent\";\nimport OrderBook from \"./OrderBook\";\nimport RealTimePriceChart from \"./RealTimePriceChart\";\nimport ProductContext from \"../utils/ProductContext\";\nimport useWebSocket from \"../utils/customHooks/useWebSocket\";\n\nconst WebSocketComponent = () => {\n  const {\n    ticker,\n    setTickerData,\n    l2update,\n    setl2UpdateData,\n    snapshot,\n    setSnapshotData,\n  } = useContext(ProductContext);\n\n  const [selectedCurr, setSelectedCurr] = useState(\"BTC-USD\");\n  const [selectedSubs, setSelectedSubs] = useState(\"subscribe\");\n  const canvasRef = useRef();\n  const { data, isConnected } = useWebSocket(selectedCurr, selectedSubs);\n\n  useEffect(() => {\n    if (!data) return;\n\n    try {\n      const jsonResponse = JSON.parse(data);\n\n      switch (jsonResponse?.type) {\n        case \"ticker\":\n          setTickerData(jsonResponse);\n          break;\n        case \"snapshot\":\n          console.log(\"snapshot changed\");\n          setSnapshotData(jsonResponse);\n          break;\n        case \"l2update\":\n          setl2UpdateData(jsonResponse);\n          break;\n        default:\n          console.warn(\"Unhandled message type:\", jsonResponse?.type);\n          break;\n      }\n    } catch (error) {\n      console.error(\"Failed to decode JSON response:\", data, error);\n    }\n  }, [data, setTickerData, setSnapshotData, setl2UpdateData]);\n\n  useEffect(() => {\n    if (!isConnected) {\n      setTickerData({});\n    }\n  }, [isConnected, setTickerData]);\n\n  if (!ticker || !snapshot || !l2update) return null; // Return null to avoid rendering if data is missing\n\n  return (\n    <>\n      <div className=\"flex flex-row mt-5 justify-normal align-middle content-evenly\">\n        <label className=\"mx-2 w-3/12 font-bold dark:text-white text-gray-400 \">\n          <select\n            className=\"px-3 py-2 w-40 bg-white dark:bg-inherit shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none block rounded-md sm:text-sm focus:ring-1\"\n            value={selectedCurr}\n            onChange={(e) => {\n              setSelectedCurr(e.target.value);\n              setSelectedSubs(\"subscribe\");\n            }}\n          >\n            {selectOptions.map((opts) => (\n              <option key={opts} value={opts}>\n                {opts}\n              </option>\n            ))}\n          </select>\n        </label>\n        {/* <button\n          className=\"bg-sky-500 hover:bg-sky-700 text-white rounded-lg px-2 mx-2\"\n          onClick={() => setSelectedSubs(\"unsubscribe\")}\n        >\n          Unsubscribe\n        </button> */}\n        <TopOfBookComponent {...{ ticker }} />\n      </div>\n      <div className=\"flex flex-row dark:bg-slate-800 bg-white dark:text-white text-gray-400\">\n        <div className=\"flex flex-col w-9/12\" ref={canvasRef}>\n          {canvasRef.current && (\n            <RealTimePriceChart\n              width={canvasRef.current.clientWidth}\n              height={canvasRef.current.offsetHeight}\n            />\n          )}\n        </div>\n        <div className=\"w-3/12\">\n          <OrderBook />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default WebSocketComponent;\n","export const selectOptions = [\"BTC-USD\", \"ETH-USD\", \"LTC-USD\", \"BCH-USD\"];\nexport const GET_PRODUCTS_URL =\n  \"https://api.exchange.coinbase.com/products?type=online\";\n","import { useContext } from \"react\";\nimport PriceBoxComponent from \"./PriceBoxComponent\";\nimport ProductContext from \"../utils/ProductContext\";\nconst TopOfBookComponent = ({ ticker }) => {\n  //const { ticker } = useContext(ProductContext);\n  const color = ticker.side === \"buy\" ? \"text-[#00ff00]\" : \"text-[#ff0000]\";\n  if (!ticker) return;\n  return (\n    <div>\n      <table className=\"table-fixed text-xs border-none w-8/12 \">\n        <tbody>\n          <tr className=\"font-semibold dark:text-white text-gray-400\">\n            <td className=\"border-none\">Best Bid</td>\n            <td className=\"border-none\">Bid Size</td>\n            <td className=\"border-none\">Best Ask</td>\n            <td className=\"border-none\">Ask Size</td>\n            <td className=\"border-none\">Price</td>\n            <td className=\"border-none\">24hr Volume</td>\n          </tr>\n          <tr className=\"dark:text-slate-400 border-none text-gray-800\">\n            <td className=\"border-none\">{ticker.best_bid}</td>\n            <td className=\"border-none\">{ticker.best_bid_size}</td>\n            <td className=\"border-none\">{ticker.best_ask}</td>\n            <td className=\"border-none\">{ticker.best_ask_size}</td>\n            <td className={color + \" border-none\"}>{ticker.price}</td>\n            <td className=\"border-none\">{ticker.volume_24h}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default TopOfBookComponent;\n","const PriceBoxComponent = ({ ticker }) => {\n  const { type, best, price, size } = ticker;\n  const bgColor = type.toUpperCase() === \"ASK\" ? \"bg-green-800\" : \"bg-blue-800\";\n  return (\n    <div className=\"relative bg-white m-5 pb-8 shadow-xl ring-1 ring-gray-900/5 sm:rounded-lg \">\n      <div className=\"border-solid border-s-blue-500\">\n        <div className=\"divide-y divide-gray-300/50\">\n          <div className=\"bg-blue-800 py-8 w-full text-basetext-gray-600\">\n            <h2 className=\"px-4 text-lg font-extrabold text-white\">\n              Best {type}: {best}\n            </h2>\n          </div>\n          <div className=\"flex flex-row pt-4 text-base font-semibold leading-7 justify-between\">\n            <div className=\"px-6\">\n              <p className=\"text-gray-900\">{price}</p>\n              <p className=\"text-gray-400 text-sm\">{type} Price</p>\n            </div>\n            <div className=\"px-6 text-right\">\n              <p className=\"text-gray-900\">{size}</p>\n              <p className=\"text-gray-400 text-sm\">{type} Quantity</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PriceBoxComponent;\n","import { createContext } from \"react\";\n\nconst ProductContext = createContext({\n  ticker: {},\n  snapshot: {},\n  l2update: {},\n});\n\nexport default ProductContext;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport ProductContext from \"../utils/ProductContext\";\n\nconst OrderBook = () => {\n  const [bids, setBids] = useState(new Map());\n  const [asks, setAsks] = useState(new Map());\n  const [loading, setLoading] = useState(true);\n  //console.log(\"initial snapshot: \", snapshot);\n  const { l2update, snapshot } = useContext(ProductContext);\n\n  useEffect(() => {\n    // Initialize the order book with snapshot data\n    const newBids = new Map();\n    const newAsks = new Map();\n\n    snapshot?.bids?.forEach(([price, size]) => {\n      if (parseFloat(size) > 0) {\n        newBids.set(price, size);\n      }\n    });\n    snapshot?.asks?.forEach(([price, size]) => {\n      if (parseFloat(size) > 0) {\n        newAsks.set(price, size);\n      }\n    });\n\n    setBids(newBids);\n    setAsks(newAsks);\n  }, [snapshot]);\n  useEffect(() => {\n    // Update the order book with incremental updates\n    const newBids = new Map(bids);\n    const newAsks = new Map(asks);\n\n    l2update?.changes?.forEach(([side, price, size]) => {\n      if (side === \"buy\") {\n        if (parseFloat(size) === 0) {\n          newBids.delete(price);\n        } else {\n          newBids.set(price, size);\n        }\n      } else if (side === \"sell\") {\n        if (parseFloat(size) === 0) {\n          newAsks.delete(price);\n        } else {\n          newAsks.set(price, size);\n        }\n      }\n    });\n\n    setBids(newBids);\n    setAsks(newAsks);\n    //console.log(newBids.size, newAsks.size);\n  }, [l2update]);\n  //console.log(snapshot);\n  // Get the latest 10 entries for bids and asks\n  const getLatestEntries = (entries) => {\n    return Array.from(entries.entries())\n      .sort((a, b) => parseFloat(b[0]) - parseFloat(a[0])) // Sort in descending order for bids\n      .slice(0, 10); // Limit to latest 10 entries\n  };\n  const getAskLatestEntries = (entries) => {\n    return Array.from(entries.entries())\n      .sort((a, b) => parseFloat(a[0]) - parseFloat(b[0])) // Sort in descending order for bids\n      .slice(0, 10); // Limit to latest 10 entries\n  };\n\n  const bidArray = getLatestEntries(bids);\n  const askArray = getAskLatestEntries(asks);\n\n  // Calculate average price based on last ask and first bid\n  const calculateAveragePrice = (bidArray, askArray) => {\n    const lastAskPrice =\n      askArray.length > 0 ? parseFloat(askArray[askArray.length - 1][0]) : 0;\n    const firstBidPrice = bidArray.length > 0 ? parseFloat(bidArray[0][0]) : 0;\n\n    return (lastAskPrice + firstBidPrice) / 2 || 0;\n  };\n\n  // Calculate spread between last ask and first bid\n  const calculateSpread = (bidArray, askArray) => {\n    const lastAskPrice =\n      askArray.length > 0 ? parseFloat(askArray[askArray.length - 1][0]) : 0;\n    const firstBidPrice = bidArray.length > 0 ? parseFloat(bidArray[0][0]) : 0;\n\n    return lastAskPrice - firstBidPrice;\n  };\n\n  return (\n    <div className=\"table-container text-xs\">\n      <table className=\"table-fixed\">\n        <thead>\n          <tr>\n            <th className=\"bg-inherit\">Price</th>\n            <th className=\"bg-transparent\">Size</th>\n          </tr>\n        </thead>\n        <tbody>\n          {askArray.map(([price, size], index) => (\n            <tr key={\"ask\" + index}>\n              <td className=\"text-[#ff0000]\">{parseFloat(price)}</td>\n              <td>{parseFloat(size)}</td>\n            </tr>\n          ))}\n          <tr className=\"dark:text-slate-400 text-xs text-gray-800\">\n            <td>\n              Average Price:{\" \"}\n              {calculateAveragePrice(bidArray, askArray).toFixed(2)}\n            </td>\n            <td>Spread: {calculateSpread(bidArray, askArray).toFixed(2)} </td>\n          </tr>\n          {bidArray.map(([price, size], index) => (\n            <tr key={\"bid\" + index}>\n              <td className=\"text-[#00ff00]\">{parseFloat(price)}</td>\n              <td>{parseFloat(size)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default OrderBook;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  ChartCanvas,\n  Chart,\n  XAxis,\n  YAxis,\n  LineSeries,\n  CrossHairCursor,\n  MouseCoordinateX,\n  MouseCoordinateY,\n  MovingAverageTooltip,\n  CurrentCoordinate,\n  lastVisibleItemBasedZoomAnchor,\n  ZoomButtons,\n} from \"react-financial-charts\";\nimport { scaleTime, scaleLinear } from \"d3-scale\";\nimport { timeFormat } from \"d3-time-format\";\nimport ProductContext from \"../utils/ProductContext\";\n\nconst formatDate = timeFormat(\"%Y-%m-%d %H:%M:%S\");\n\nconst RealTimePriceChart = ({ width, height }) => {\n  const { ticker } = useContext(ProductContext);\n  const maxPoints = 100;\n  const [chartData, setChartData] = useState([]);\n\n  useEffect(() => {\n    if (ticker?.best_ask && ticker?.best_bid && ticker?.time) {\n      const newData = [\n        ...chartData,\n        {\n          ask: parseFloat(ticker.best_ask),\n          bid: parseFloat(ticker.best_bid),\n          x: new Date(ticker.time),\n        },\n      ];\n\n      // Keep only the most recent `maxPoints` data points\n      if (newData.length > maxPoints) {\n        newData.shift(); // Remove the oldest data point\n      }\n\n      setChartData(newData);\n\n      // Trigger a redraw\n      // setRedrawKey((prevKey) => prevKey + 1);\n    } else {\n      setChartData([]);\n    }\n  }, [ticker]);\n\n  const yAccessorBid = (d) => d?.bid;\n  const yAccessorAsk = (d) => d?.ask;\n\n  const xExtents = [chartData[0]?.x, chartData[chartData.length - 1]?.x];\n\n  const getXTicks = (data, tickCount) => {\n    if (data.length === 0) return [];\n    const [minDate, maxDate] = [\n      Math.min(...data.map((d) => d?.x)),\n      Math.max(...data.map((d) => d?.x)),\n    ];\n    const step = (maxDate - minDate) / (tickCount - 1);\n    return Array.from(\n      { length: tickCount },\n      (_, i) => new Date(minDate + i * step)\n    );\n  };\n\n  return (\n    <div className=\"relative w-full h-full overflow-auto\">\n      <ChartCanvas\n        key={true} // Use key to force re-render\n        height={height}\n        width={width}\n        margin={{\n          top: 0,\n          right: 80,\n          bottom: 40,\n          left: 20,\n        }}\n        ratio={1}\n        seriesName=\"Real-Time Data\"\n        data={chartData}\n        xAccessor={(d) => d?.x}\n        xScale={scaleTime()}\n        yScale={scaleLinear()}\n        xExtents={xExtents}\n        maintainPointsPerPixelOnResize={true}\n        zoomMultiplier={2}\n        zoomAnchor={lastVisibleItemBasedZoomAnchor}\n      >\n        <Chart id={1} yExtents={(d) => [d.bid, d.ask]}>\n          <XAxis\n            showGridLines\n            tickValues={getXTicks(chartData, 5)} // Display 5 ticks\n            tickFormat={formatDate}\n            tickStrokeStyle=\"#ff0000\"\n            tickLabelFill=\"#94a3b8\"\n            gridLinesStrokeStyle=\"#94a3b8\"\n            zoomEnabled={true}\n            tickSize={5}\n          />\n          <YAxis\n            showGridLines\n            tickStrokeStyle=\"#00ff00\"\n            tickLabelFill=\"#94a3b8\"\n            tickSize={5}\n            zoomEnabled={true}\n          />\n          <LineSeries\n            yAccessor={yAccessorBid}\n            strokeStyle=\"#00ff00\"\n            strokeWidth={2}\n          />\n          <CurrentCoordinate yAccessor={yAccessorBid} fillStyle=\"#00ff00\" />\n          <LineSeries\n            yAccessor={yAccessorAsk}\n            strokeStyle=\"#ff0000\"\n            strokeWidth={2}\n          />\n          <CurrentCoordinate yAccessor={yAccessorAsk} fillStyle=\"#ff0000\" />\n          <MouseCoordinateX\n            displayFormat={formatDate} // Format mouse X coordinate display\n          />\n          <MouseCoordinateY\n            displayFormat={(d) => d.toFixed(2)} // Format mouse Y coordinate display\n          />\n          <MovingAverageTooltip\n            origin={[8, 24]}\n            textFill=\"#94a3b8\"\n            options={[\n              {\n                yAccessor: yAccessorBid,\n                type: \"Bid\",\n                stroke: \"#00ff00\",\n                windowSize: 2,\n              },\n              {\n                yAccessor: yAccessorAsk,\n                type: \"Ask\",\n                stroke: \"#ff0000\",\n                windowSize: 2,\n              },\n            ]}\n          />\n          <ZoomButtons />\n        </Chart>\n        <CrossHairCursor />\n      </ChartCanvas>\n    </div>\n  );\n};\n\nexport default RealTimePriceChart;\n","import { GET_PRODUCTS_URL } from \"../constants\";\nconst URI = \"wss://ws-feed.exchange.coinbase.com\";\n\n// const useWebSocket = async () => {\n//   const ws = new WebSocket(URI);\n\n//   //const connectWebSocket = async () => {\n//   ws.onopen = ({ selectedCurr, selectedSubs }) => {\n//     const subscriptionType = selectedSubs;\n//     const subscribeMessage = JSON.stringify({\n//       type: subscriptionType,\n//       product_ids: [selectedCurr ?? selectedCurr],\n//       channels: [\"ticker\", \"level2_batch\"],\n//     });\n//     ws.send(subscribeMessage);\n//     console.log(\n//       `${subscriptionType} to ticker and l2Batch channel for product ${selectedCurr}`\n//     );\n//   };\n\n//   ws.onmessage = (event) => {\n//     if (selectedSubs === \"unsubscribe\") {\n//       ws.close();\n//     }\n//     try {\n//       const jsonResponse = JSON.parse(event.data);\n//       switch (jsonResponse.type) {\n//         case \"ticker\": {\n//           setTickerData(jsonResponse);\n//           break;\n//         }\n//         case \"l2update\": {\n//           setl2UpdateData(jsonResponse);\n//           break;\n//         }\n//         case \"snapshot\": {\n//           setSnapshotData(jsonResponse);\n//           break;\n//         }\n//         default:\n//           break;\n//       }\n//     } catch (error) {\n//       console.error(\"Failed to decode JSON response:\", event.data);\n//     }\n//   };\n\n//   ws.onclose = () => {\n//     console.warn(\"Connection closed, retrying...\");\n//     setTimeout(connectWebSocket, 1000);\n//   };\n\n//   ws.onerror = (error) => {\n//     console.error(\"Unexpected error:\", error);\n//     setTimeout(connectWebSocket, 1000);\n//   };\n//   //connectWebSocket();\n\n//   return ws;\n// };\n\nimport { useState, useEffect, useRef } from \"react\";\n\nconst useWebSocket = (selectedCurr, selectedSubs) => {\n  const [data, setData] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef(null);\n\n  useEffect(() => {\n    // Initialize WebSocket connection\n    wsRef.current = new WebSocket(URI);\n\n    const ws = wsRef.current;\n\n    // Handle WebSocket events directly\n    ws.onopen = () => {\n      const subscriptionType = selectedSubs;\n      const subscribeMessage = JSON.stringify({\n        type: subscriptionType,\n        product_ids: [selectedCurr ?? selectedCurr],\n        channels: [\"ticker\", \"level2_batch\"],\n      });\n      ws.send(subscribeMessage);\n      console.log(\n        `${subscriptionType} to ticker and l2Batch channel for product ${selectedCurr}`\n      );\n      setIsConnected(true);\n    };\n\n    ws.onclose = () => {\n      console.log(\"WebSocket disconnected\");\n      setIsConnected(false);\n    };\n\n    ws.onmessage = (event) => {\n      if (selectedSubs === \"unsubscribe\") {\n        setIsConnected(false);\n        ws.close();\n      }\n      setData(event.data);\n    };\n\n    ws.onerror = (error) => {\n      console.error(\"WebSocket error\", error);\n    };\n\n    // Clean up WebSocket connection on component unmount\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [selectedCurr, selectedSubs]);\n\n  return { data, isConnected };\n};\n\nexport default useWebSocket;\n"],"names":[],"version":3,"file":"index.js.map"}